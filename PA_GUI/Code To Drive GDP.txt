1:43 PM 4/26/2013
copied from email dated 1/28/2013


void CPGTDlg::SendJointCmds( TCPDUMMY * pInfoIn )
{
       CString s;
       RECVBUFFER * pRecvBuf;
       int i;
       CString s1;

       SIGNAL_DETAIL * pSignalDetails = (SIGNAL_DETAIL *)pInfoIn;

       // -----------------------------------------------------------------------------------
       // Cmd 1 New Graph
       // -----------------------------------------------------------------------------------
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd1.Cmd = NEW_GRAPH;
       s1 = _T("TruPhase");
       if( m_sInspStation.CompareNoCase(s1) == 0 )
       { // TruPhase
              strcpy( pRecvBuf->Cmd1.Client, "TruPhase" );
              pRecvBuf->Cmd1.EquipmentNumber =TRU_PHASE;
       }
       else
       { // Truscan Field Unit
              strcpy( pRecvBuf->Cmd1.Client, "TruscanFU" );
              pRecvBuf->Cmd1.EquipmentNumber =TRUSCAN_FIELD_UNIT;
       }

// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//     pRecvBuf->Cmd1.EquipmentNumber =TRUSCOPE;



       pRecvBuf->Cmd1.Length = 50;       // screen length in range / feet
       pRecvBuf->Cmd1.Units = FEET;
       pRecvBuf->Cmd1.GraphCount = 8;
       pRecvBuf->Cmd1.BarDrawWidth = (float) (1./24.); //8.);
       pRecvBuf->Cmd1.StopInspState = 1;
       if( m_bGDPSaveDataToDB )
              pRecvBuf->Cmd1.SaveToDB = 1;
       else
              pRecvBuf->Cmd1.SaveToDB = 0;
       pRecvBuf->Cmd1.GdpMsgVer = 1;
       pRecvBuf->Cmd1.NotSaveColor = 0xffff00;
       pRecvBuf->Cmd1.StopColor = 0x884444;
       pRecvBuf->Cmd1.SaveColor = 0xffffff;

       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // -----------------------------------------------------------------------------------
       // Cmd 2 Graph Spec
       // -----------------------------------------------------------------------------------
       // graph 1 title bar shows the joint number
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 1;
       pRecvBuf->Cmd2.GraphType = TITLEBAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("") );
       pRecvBuf->Cmd2.Double = SINGLE;
       pRecvBuf->Cmd2.MaxHeight = 100;
       pRecvBuf->Cmd2.MinHeight = 0;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 2 Wall
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 2;
       pRecvBuf->Cmd2.GraphType = CURVE;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Wall") );
       pRecvBuf->Cmd2.Double = MULTI;
       pRecvBuf->Cmd2.NumberTraces = 2;
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[0].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[1].TraceInfo.SignalType;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[0].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[0].TraceInfo.MinHeight;
       pRecvBuf->Cmd2.NominalWall = pSignalDetails->Header.NominalWall;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 3 LID/LOD
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 3;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Longitudinal") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[2].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[3].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[2].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[2].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 4 TID/TOD
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 4;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Transverse") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[4].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[5].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[4].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[4].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 5 Oblique 1
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 5;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Oblique 1") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[6].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[7].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[6].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[6].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 6 Oblique 2
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 6;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Oblique 2") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[8].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[9].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[8].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[8].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 7 Oblique 3
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 7;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Oblique 3") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[10].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[11].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[10].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[10].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // graph 8 Lamination
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd2.Cmd = GRAPH_SPEC;
       pRecvBuf->Cmd2.GraphNum = 8;
       pRecvBuf->Cmd2.GraphType = BAR;
       _tcscpy( pRecvBuf->Cmd2.GraphName, _T("Lamination") );
       pRecvBuf->Cmd2.SignalTypeTop = m_TraceBuffer[12].TraceInfo.SignalType;
       pRecvBuf->Cmd2.SignalTypeBottom = m_TraceBuffer[13].TraceInfo.SignalType;
       pRecvBuf->Cmd2.Double = UP_UP;
       pRecvBuf->Cmd2.MaxHeight = m_TraceBuffer[12].TraceInfo.MaxHeight;
       pRecvBuf->Cmd2.MinHeight = m_TraceBuffer[12].TraceInfo.MinHeight;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // -----------------------------------------------------------------------------------
       // Cmd 7 Status Field
       // -----------------------------------------------------------------------------------
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd7.Cmd = STATUS_FIELD;
       pRecvBuf->Cmd7.GraphNum = 1;
       pRecvBuf->Cmd7.NumOfFld = 1;
       _tcscpy( pRecvBuf->Cmd7.Field[0].Text, _T("Joint Num:") );
       strcpy( pRecvBuf->Cmd7.Field[0].Spec, "%5d" );
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();
       
       // -----------------------------------------------------------------------------------
       // Cmd 3 Threshold
       // -----------------------------------------------------------------------------------
       for( i=0; i<TOTAL_NUM_TRACES; i++ )
       {
              pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
              pRecvBuf->Cmd3.Cmd = GRAPH_THRESHOLD;
              pRecvBuf->Cmd3.GraphNum = i/2+2;
              pRecvBuf->Cmd3.Top = i-i/2*2;
              pRecvBuf->Cmd3.Threshold = m_TraceBuffer[i].TraceInfo.ThreshRej;
              pRecvBuf->Cmd3.ThresholdType = DOTTED;
              pRecvBuf->Cmd3.ThresholdColor = 0xff0000; // red , rej
              _tcscpy( pRecvBuf->Cmd3.TraceName, _T(" ") );
              m_semSCPDataOut.Lock();
              m_SCPDataOutPacketList.AddTail( pRecvBuf );
              m_semSCPDataOut.Unlock();

              pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
              pRecvBuf->Cmd3.Cmd = GRAPH_THRESHOLD;
              pRecvBuf->Cmd3.GraphNum = i/2+2;
              pRecvBuf->Cmd3.Top = i-i/2*2;
              pRecvBuf->Cmd3.Threshold = m_TraceBuffer[i].TraceInfo.ThresholdQus;
              pRecvBuf->Cmd3.ThresholdType = DASHED;
              pRecvBuf->Cmd3.ThresholdColor = 0xffff00; //Yellow, ques
              _tcscpy( pRecvBuf->Cmd3.TraceName, _T(" ") );
              m_semSCPDataOut.Lock();
              m_SCPDataOutPacketList.AddTail( pRecvBuf );
              m_semSCPDataOut.Unlock();
       }

       // -----------------------------------------------------------------------------------
       // Cmd 9 Joint Start
       // -----------------------------------------------------------------------------------
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd9.Cmd = JOINT_START;
       pRecvBuf->Cmd9.DispUnits = METERS;
       pRecvBuf->Cmd9.NominalWall = 7000;
       if( m_bGDPSaveDataToDB )
              pRecvBuf->Cmd9.SaveToDB = 1;
       else
              pRecvBuf->Cmd9.SaveToDB = 0;
       pRecvBuf->Cmd9.DispMode = 1; // linear
       pRecvBuf->Cmd9.DispUnits = 0; // Imperial
       pRecvBuf->Cmd9.NominalWall = pSignalDetails->Header.NominalWall;
       for( i=0; i<50; i++ )
              pRecvBuf->Cmd9.PipeNumberID[i] = pSignalDetails->Header.JointDetailID[i];
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // -----------------------------------------------------------------------------------
       // Cmd 8 Status Value (include Joint number)
       // -----------------------------------------------------------------------------------
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd8.Cmd = STATUS_VALUE;
       pRecvBuf->Cmd8.GraphNum = 1;
       pRecvBuf->Cmd8.FieldNum = 1;
       pRecvBuf->Cmd8.Value = pSignalDetails->Header.JointNumber;
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

       // -----------------------------------------------------------------------------------
       // Cmd 4 Data
       // -----------------------------------------------------------------------------------
       int iFlaw, iPoint, iTrace;
       int iMaxTracePoint = 0;

       iFlaw = 0;
       for( iTrace=0; iTrace<TOTAL_NUM_TRACES; iTrace++ )
              iMaxTracePoint = max( iMaxTracePoint, m_TraceBuffer[iTrace].Num_Of_Valid_Points );

       for( iPoint=0; iPoint<iMaxTracePoint; iPoint++ )
       {
              for( iTrace=0; iTrace<TOTAL_NUM_TRACES; iTrace++ )
              {
                     if( iPoint < m_TraceBuffer[iTrace].Num_Of_Valid_Points )
                     {
                           if( iFlaw < m_FlawBuffer.Total_Flaws )
                           {
                                  // send out all flaws with x loc less than this trace this point
                                  while( iFlaw < m_FlawBuffer.Total_Flaws && 
                                            m_FlawBuffer.Flaw[iFlaw].Xloc <= m_TraceBuffer[iTrace].Point[iPoint].Xloc 
                                          )
                                  {
                                         SendFlaw( iFlaw, pInfoIn );
                                         iFlaw++;
                                  }
                           }
                           SendTracePoint( iTrace, iPoint, pInfoIn );
                     } // if( iPoint 
              } // for( iTrace=0
       } // for( iPoint=0
       
       // send the rest flaws if there are leftover
       while( iFlaw < m_FlawBuffer.Total_Flaws )
       {
              SendFlaw( iFlaw, pInfoIn );
              iFlaw++;
       }


       // -----------------------------------------------------------------------------------
       // Cmd 10 Joint End
       // -----------------------------------------------------------------------------------
       pRecvBuf = (RECVBUFFER *) new RECVBUFFER;
       pRecvBuf->Cmd10.Cmd = JOINT_END;
       pRecvBuf->Cmd10.PipeLength = pSignalDetails->Header.PipeLength;
       pRecvBuf->Cmd10.RPM = pSignalDetails->Header.RPM;
       pRecvBuf->Cmd10.LineSpeed = pSignalDetails->Header.LineSpeed;
       pRecvBuf->Cmd10.Start = pSignalDetails->Header.IEStartLoc;
       pRecvBuf->Cmd10.Stop = pSignalDetails->Header.IEStopLoc;
       pRecvBuf->Cmd10.MagEntry1 = 0.f;
       pRecvBuf->Cmd10.MagEntry2 = 0.f;
       pRecvBuf->Cmd10.MagExit = 0.f;
       pRecvBuf->Cmd10.Demag = 0.f;
       pRecvBuf->Cmd10.MinWall = pSignalDetails->Header.MinWall;
       pRecvBuf->Cmd10.MaxWall = pSignalDetails->Header.MaxWall;
       pRecvBuf->Cmd10.MeanWall = pSignalDetails->Header.MeanWall;
       for( i=0; i<50; i++ )
              pRecvBuf->Cmd10.PipeNumberID[i] = pSignalDetails->Header.JointDetailID[i];
       m_semSCPDataOut.Lock();
       m_SCPDataOutPacketList.AddTail( pRecvBuf );
       m_semSCPDataOut.Unlock();

} // SendJointCmds()

